<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;

class UpdateUsersTableWithRights extends Migration
{
    protected string $usersTable = 'users';

    public function up()
    {
        if (! Schema::hasTable($this->usersTable)) {
            // Для тестирования пакета
            // Если нет таблицы пользователей, то создаем таблицу-заготовку
            Schema::create($this->usersTable, function (Blueprint $table) {
                $table->id();
                $table->string('email');

                $table->timestamps();
            });
        }

        Schema::table($this->usersTable, function (Blueprint $table) {
            if (in_array('create-blessings-attribute', Config::get('users.features'))) {
                if (! Schema::hasColumn($this->usersTable, Config::get('users.blessings-attribute'))) {
                    $table->json(Config::get('users.blessings-attribute'))->nullable();
                }
            }

            if (in_array('create-admin-role-attribute', Config::get('users.features'))) {
                if (! Schema::hasColumn($this->usersTable, Config::get('users.admin-role-attribute'))) {
                    $table->integer(Config::get('users.admin-role-attribute'))->default(1);
                }
            }

            if (in_array('create-cohorts-attribute', Config::get('users.features'))) {
                if (! Schema::hasColumn($this->usersTable, Config::get('users.cohorts-attribute'))) {
                    $table->json(Config::get('users.cohorts-attribute'))->nullable();
                }
            }
        });

        Schema::create('cohorts', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->json('blessings')->nullable();
        });

        if (in_array('create-admin-role-attribute', Config::get('users.features'))
            && $owner = Config::get('users.owner')) {
            DB::table($this->usersTable)
                ->where('email', $owner)
                ->update([Config::get('users.admin-role-attribute') => 4]);
        }
    }

    public function down()
    {
        if (in_array('create-blessings-attribute', Config::get('users.features'))) {
            if (Schema::hasColumn($this->usersTable, Config::get('users.blessings-attribute'))) {
                Schema::table($this->usersTable, function (Blueprint $table) {
                    $table->dropColumn(Config::get('users.blessings-attribute'));
                });
            }
        }

        if (in_array('create-admin-role-attribute', Config::get('users.features'))) {
            if (Schema::hasColumn($this->usersTable, Config::get('users.admin-role-attribute'))) {
                Schema::table($this->usersTable, function (Blueprint $table) {
                    $table->dropColumn(Config::get('users.admin-role-attribute'));
                });
            }
        }

        if (in_array('create-cohorts-attribute', Config::get('users.features'))) {
            if (Schema::hasColumn($this->usersTable, Config::get('users.cohorts-attribute'))) {
                Schema::table($this->usersTable, function (Blueprint $table) {
                    $table->dropColumn(Config::get('users.cohorts-attribute'));
                });
            }
        }

        if (! Schema::hasTable('cohorts')) {
            Schema::dropIfExists('cohorts');
        }
    }
}
